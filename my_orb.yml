version: 2.1
description: |
    An orb to merge docusaurus docs from several repos.
display:
    source_url: https://github.com/infinitered/publish-docs
orbs:
    node: circleci/node@5.1.0
commands:
    build_docusaurus:
        description: Runs the Docusaurus build script to ensure that the documentation builds without errors.
        steps:
            - run:
                command: |
                    echo "Changing to target directory: ~/target_repo"
                    cd ~/target_repo
                    echo "Running Docusaurus build..."
                    yarn build || { echo "Docusaurus build failed"; exit 1; }
                name: Run Docusaurus Build
    clone_required_repos:
        description: |
            "Setup git and clone required repositories"
        parameters:
            git_email:
                default: ""
                description: Email for Git configuration.
                type: string
            git_username:
                default: ""
                description: Username for Git configuration.
                type: string
            target_repo:
                default: ""
                description: The GitHub repository URL where the documentation resides.
                type: string
        steps:
            - checkout
            - run:
                command: |
                    # Check if Git is already installed
                    if git --version > /dev/null 2>&1; then
                      echo "Git is already installed."
                    else
                      echo "Git not found. Installing..."
                      # Update package lists and install Git
                      sudo apt-get update || { echo "apt-get update failed"; exit 1; }
                      sudo apt-get install -y git || { echo "Git installation failed"; exit 1; }
                      echo "Git installed successfully."
                    fi
                name: Install Git
            - run:
                command: |
                    # Configure Git username and email
                    echo "Configuring Git username and email: << parameters.git_username >> -- << parameters.git_email >>"
                    git config --global user.name "<< parameters.git_username >>" || { echo "Git username configuration failed"; exit 1; }
                    git config --global user.email "<< parameters.git_email >>" || { echo "Git email configuration failed"; exit 1; }
                name: Setup Git
            - run:
                command: git clone << parameters.target_repo >> ~/target_repo || { echo "Git clone failed"; exit 1; }
                name: Clone target repository
    commit_and_push:
        description: |
            "Commits and pushes the updated documentation to the docs repository."
        steps:
            - run:
                command: |
                    # Extract the last commit message and look for a PR number
                    COMMIT_MESSAGE=$(git log -1 --pretty=%B) || { echo "Fetching commit message failed"; exit 1; }
                    COMMIT_HASH=$(git rev-parse HEAD) || { echo "Fetching commit hash failed"; exit 1; }
                    REPO_URL=$(git config --get remote.origin.url) || { echo "Fetching repo URL failed"; exit 1; }
                    REPO_NAME=$(basename -s .git $REPO_URL) || { echo "Parsing repo name failed"; exit 1; }

                    PR_NUMBER=$(echo $COMMIT_MESSAGE | grep -oP "(#\K\d+)")
                    if [ ! -z "$PR_NUMBER" ]; then
                      PR_LINK="https://github.com/infinitered/$REPO_NAME/pull/$PR_NUMBER"
                      FINAL_COMMIT_MESSAGE="$REPO_NAME -- $COMMIT_MESSAGE -- $PR_LINK"
                    else
                      COMMIT_LINK="https://github.com/infinitered/$REPO_NAME/commit/$COMMIT_HASH"
                      FINAL_COMMIT_MESSAGE="$REPO_NAME -- $COMMIT_MESSAGE -- $COMMIT_LINK"
                    fi
                    echo "export FINAL_COMMIT_MESSAGE=\"$FINAL_COMMIT_MESSAGE\"" >> $BASH_ENV || { echo "Exporting FINAL_COMMIT_MESSAGE failed"; exit 1; }
                name: Parse commit message and PR number
            - run:
                command: |
                    cd ~/target_repo || { echo "Changing directory failed"; exit 1; }
                    git add . || { echo "Git add failed"; exit 1; }
                    git commit -m "$FINAL_COMMIT_MESSAGE" || { echo "Git commit failed"; exit 1; }
                    git push origin main || { echo "Git push failed"; exit 1; }
                name: Commit and push to target repository
    copy_docs_to_target:
        description: |
            "Clones a docusaurus repo and adds the docs from the current repo to it."
        parameters:
            description:
                default: ""
                description: Short description of the package used in indexes etc.
                type: string
            label:
                default: package-name
                description: The label that will appear in the sidebar of the docs site. Should be the full name of the package in Title Case. (i.e. Ignite CLI, or React Native MLKit).
                type: string
            project_name:
                default: ""
                description: 'The path where these documents will be located on the docs site: (i.e. /docs/{package-name}/getting-started.md)'
                type: string
            source_docs_path:
                default: ./docs
                description: The path to the directory containing the markdown files. Defaults to './docs'.
                type: string
            target_docs_path:
                default: ./docs
                description: The path to the directory containing the markdown files. Defaults to './docs'.
                type: string
        steps:
            - run:
                command: |
                    echo "Checking if documents exist in the source directory."
                    if [ ! "$(ls -A << parameters.source_docs_path >>)" ]; then
                      echo "Error: No files found in docs directory."
                      exit 1
                    fi
                name: Check if docs exist
            - run:
                command: |
                    echo "Copying documents to the target repository."
                    cp -R << parameters.source_docs_path >> ~/target_repo/<<parameters.target_docs_path>>/<< parameters.project_name >>
                    echo "Documents copied successfully."
                name: Copy docs to target repository
            - run:
                command: |
                    echo "Checking for static files in the target repository."
                    if [ "$(ls -A ~/target_repo/docs/<< parameters.project_name >>/_static_)" ]; then
                      echo "Moving static files."
                      mv ~/target_repo/docs/<< parameters.project_name >>/_static_ ~/target_repo/static/<< parameters.project_name >>/
                      echo "Static files moved successfully."
                    else
                      echo "No static files to copy."
                    fi
                name: Move static content to appropriate folder
            - run:
                command: |
                    echo "Creating _category_.json file." echo '{
                      "label": "<< parameters.label >>",
                      "link": {
                        "type": "generated-index",
                        "description": "<< parameters.description >>"
                      }
                    }' > ~/target_repo/docs/<< parameters.project_name >>/_category_.json echo "_category_.json file created successfully."
                name: Create _category_.json
    validate_params:
        description: |
            "Validate that all required parameters are set"
        parameters:
            description:
                description: Short description of the package used in indexes etc.
                type: string
            git_email:
                description: Email for Git configuration.
                type: string
            git_username:
                description: Username for Git configuration.
                type: string
            label:
                description: The label that will appear in the sidebar of the docs site.
                type: string
            project_name:
                description: The path where these documents will be located on the docs site.
                type: string
            target_repo:
                description: The GitHub repository URL where the documentation resides.
                type: string
        steps:
            - run:
                command: |
                    missing_params=""

                    if [ -z "<<parameters.git_email>>" ]; then
                      missing_params="${missing_params} git_email"
                    fi
                    if [ -z "<<parameters.git_username>>" ]; then
                      missing_params="${missing_params} git_username"
                    fi
                    if [ -z "<<parameters.target_repo>>" ]; then
                      missing_params="${missing_params} target_repo"
                    fi
                    if [ -z "<<parameters.description>>" ]; then
                      missing_params="${missing_params} description"
                    fi
                    if [ -z "<<parameters.label>>" ]; then
                      missing_params="${missing_params} label"
                    fi
                    if [ -z "<<parameters.project_name>>" ]; then
                      missing_params="${missing_params} project_name"
                    fi

                    if [ ! -z "$missing_params" ]; then
                      echo "Error: Publish Docs Orb - Missing parameters:$missing_params"
                      exit 1
                    fi
                name: Validate Parameters
jobs:
    build_docs:
        description: Test the documentation without pushing changes.
        docker:
            - image: cimg/node:16.13
        parameters:
            description:
                default: ""
                description: The description of the category that this documentation where these docs will live in the sidebar.
                type: string
            git_email:
                default: ""
                description: The Git email for commit and push operations.
                type: string
            git_username:
                default: ""
                description: The Git username for commit and push operations.
                type: string
            label:
                default: ""
                description: The label for this section that will appear in the sidebar.
                type: string
            project_name:
                default: ""
                description: The name of the package. Defaults to the repository name if empty.
                type: string
            source_docs_path:
                default: ./docs
                description: The path to the ir-docs folder in the repository. Defaults to './ir-docs'.
                type: string
            target_repo:
                default: ""
                description: The GitHub URL of the target repository where the documentation resides.
                type: string
        steps:
            - validate_params:
                description: <<parameters.description>>
                git_email: <<parameters.git_email>>
                git_username: <<parameters.git_username>>
                label: <<parameters.label>>
                project_name: <<parameters.project_name>>
                target_repo: <<parameters.target_repo>>
            - clone_required_repos:
                git_email: << parameters.git_email >>
                git_username: << parameters.git_username >>
                target_repo: << parameters.target_repo >>
            - copy_docs_to_target:
                description: << parameters.description >>
                label: << parameters.label >>
                project_name: << parameters.project_name >>
                source_docs_path: << parameters.source_docs_path >>
            - build_docusaurus:
                target_directory: ~/target_repo
    publish_docs:
        description: The main job that orchestrates the documentation update process.
        docker:
            - image: cimg/node:16.13
        parameters:
            description:
                default: ""
                description: The description of the category that this documentation where these docs will live in the sidebar.
                type: string
            git_email:
                default: ""
                type: string
            git_username:
                default: ""
                type: string
            label:
                default: ""
                description: The label for this section that will appear in the sidebar.
                type: string
            project_name:
                default: ""
                description: The name of the package. Defaults to the repository name if empty.
                type: string
            source_docs_path:
                default: ./docs
                description: The path to the ir-docs folder in the repository. Defaults to './ir-docs'.
                type: string
            target_repo:
                default: ""
                type: string
        steps:
            - validate_params:
                description: <<parameters.description>>
                git_email: <<parameters.git_email>>
                git_username: <<parameters.git_username>>
                label: <<parameters.label>>
                project_name: <<parameters.project_name>>
                target_repo: <<parameters.target_repo>>
            - clone_required_repos:
                git_email: << parameters.git_email >>
                git_username: << parameters.git_username >>
                target_repo: << parameters.target_repo >>
            - copy_docs_to_target:
                description: << parameters.description >>
                label: << parameters.label >>
                project_name: << parameters.project_name >>
                source_docs_path: << parameters.source_docs_path >>
            - build_docusaurus
            - commit_and_push
examples:
    example:
        description: |
            Basic usage of the publish-docs orb.
        usage:
            version: "2.1"
            orbs:
                publish-docs: infinitered/publish-docs@0.1.0
            workflows:
                publish_to_docs_site:
                    jobs:
                        - publish-docs/publish_docs:
                            description: My very special package.
                            git_email: your-email@example.com
                            git_username: your-username
                            label: My Very Special Package
                            project_name: my-very-special-package
                            source_docs_path: ./optional-docs-path
                            target_repo: https://github.com/your-organization/your-docs-repo.git

